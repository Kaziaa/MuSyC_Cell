%% LyX 2.1.3 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)

# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@


\title{Delta score calculation tutorial}


\author{Bhagwan Yadav}

\maketitle
\par

This is tutorial to compute delta score using R. First, we have to load required libraries in r programming
<<load library>>=
# Load libraries required
library(drc)
library(kriging)
library(reshape2)
library(compiler)
options(warn=-1)
@

Set the working directory to the folder where finction.R file is kept.
<<set working directory>>=
# Set working directory
setwd("/home/bhagwan/Dropbox/PhD_Projects/Project-5_VBS/Manuscript/r_codes")
@

Source the function file
<<source function file>>=
# Source the functions file 
source(paste(getwd(),"/functions.R",sep=""))

@

Read response data as well as metadata files
<<read response data and metadata>>=
# Read response and metadata
response<-read.csv("/home/bhagwan/Dropbox/PhD_Projects/Project-5_VBS/data/Griner_et_al/241/responses.csv")
metadata<-read.csv("/home/bhagwan/Dropbox/PhD_Projects/Project-5_VBS/data/Griner_et_al/241/metadata.csv")
@

Get the unique block IDs
<<get unique ids>>=
# get unique bolck ids
blockId<-unique(response$BlockId)
@

Make matrix to store delta score
<<Make matrix to store delta score>>=
# Make matrix to store delta score
delta_score<-matrix(NA,length(blockId),4)
colnames(delta_score)<-c("blockId","Drug1","Drug2","Delta")
@

Compute delta  score for each block store in above variable.
<<Loop to compute delta for each combination>>=
# Loop to compute delta for each combination
#set.seed(0)
suppressWarnings(
for(i in 1:length(blockId)){ 

	blockIndex<-which(response$BlockId %in% blockId[i])
	dataM<-response[blockIndex,c(2,3,4)]

################### Preparing Input Files start #######################
#  Making plate matrix file
	plate.file<-acast(dataM,Col~Row,value.var="Value")
	plate.file<-apply(t(apply(t(plate.file),2,rev)),2,rev)
	plate.mat <- 100-plate.file
	plate.mat<-apply(plate.mat,2,as.numeric)


# Mapping concentration range file
	meta.blockIndex<-which(metadata$BlockId %in% blockId[i])

	drug1name<-as.character(as.matrix(metadata$RowName[meta.blockIndex])) 
	drug2name<-"Ibrutinib" 
	colnames(plate.file)<-rep(drug1name,ncol(plate.file))
	rownames(plate.file)<-rep(drug2name,nrow(plate.file))

	drug1conc<-as.character(as.matrix(metadata$RowConcs[meta.blockIndex]))
	drug1conc<-rev(as.numeric(unlist(strsplit(drug1conc,","))))*2
	drug2conc<-as.character(as.matrix(metadata$ColConcs[meta.blockIndex]))
	drug2conc<-rev(as.numeric(unlist(strsplit(drug2conc,","))))*2

	conc.file<-rbind(drug1conc,drug2conc)
	conc.file<-cbind(rbind(drug1name,drug2name),conc.file)
	conc.range <-conc.file
	conc.range[1,2:ncol(conc.range)]<-as.character(round(
as.numeric(conc.range[1,2:ncol(conc.range)]),digits=1))
	conc.range[2,2:ncol(conc.range)]<-as.character(
round(as.numeric(conc.range[2,2:ncol(conc.range)]),digits=1))
# Add col names and row names to plate mat
	colnames(plate.mat)<-colnames(plate.file)
	rownames(plate.mat)<-rownames(plate.file)

# Making drug combination file
	pairs.file<-matrix(NA,1,5)
	pairs.file[1,]<-c(1,drug1name,drug2name,"cellline",1)
	pairs.file <- as.data.frame(pairs.file)
	pair.list <- pairs.file
	colnames(pair.list)<-c("index","drug1","drug2","cell.line","plate")

#################### Preparing Input Files End #######################

####################### Baseline correction #####################

	output_baseline= c.SDbaselineCor(plate.mat,conc.range,pair.list)

######################## Two Way Fitting #######################
# Single plate analysis

# raw_matrix=output_baseline[[1]] # raw matrix
	cor_matrix=output_baseline[[2]] # matrix after baseline correction
	drug_pair=output_baseline[[3]] # drug names

	output = c.twowayfitting(cor_matrix,drug_pair)

	delta_score[i,1] = blockId[i]
	delta_score[i,2] = unique(colnames(plate.mat))
	delta_score[i,3] = unique(rownames(plate.mat))
	delta_score[i,4] = round(output,digits=4)

})
@


<<print delta score>>=
# print delta score
print(delta_score)
@

Compiling dynamic reporting file
<< compiling dynamic reporting file >>=
#library(knitr)
#library("tools")
#texi2pdf(knit("Delta_calculation_dynamic_report.Rnw"))
@
\end{document}
