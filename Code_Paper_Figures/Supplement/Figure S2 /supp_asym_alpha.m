

%Set default plot parameters
set(0,'DefaultAxesFontSize',12)
set(0,'DefaultLineLinewidth',4)
set(0, 'DefaultAxesFontWeight','bold')
set(0, 'DefaultAxesLineWidth',4)
set(0, 'DefaultFigureColor','w')
set(0, 'DefaultTextFontSize',12)
set(0, 'DefaultTextFontWeight','bold')

d1 = logspace(-5,0,1000);
d2 = logspace(-5,0,1000);
h1 = 1;
h2 = 1;
C1 = .005;
C2 = .001;
E0 = .05;
E1 = .01;
E2 = .01;
beta = [5];
alpha1 = [10];
alpha2 = [.1];
r1 = E0*100;
r2 = E0*100;


h = figure('color','w');
figure(h)
clf
p = 1;
k = 1;
E3 = -beta(p)*min(E1,E2)+min(E1,E2);

for i = 1:length(d1)
    for j = 1:length(d2)
        Ed(i,j) = (E3*r1*(alpha1*d2(j))^h2*(alpha2*d1(i)^2)^h1 + ...
              E3*r2*(alpha2*d1(i))^h1*(alpha1*d2(j)^2)^h2 + ...
              C2^h2*E0*r1*(C1*alpha2*d1(i))^h1 + ...
              C1^h1*E0*r2*(C2*alpha1*d2(j))^h2 + ...
              C2^h2*E1*r1*(alpha2*d1(i)^2)^h1 + ...
              C1^h1*E2*r2*(alpha1*d2(j)^2)^h2 + ...
              E3*d2(j)^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              E3*d1(i)^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C1^(2*h1)*C2^h2*E0*r1 + ...
              C1^h1*C2^(2*h2)*E0*r2 + ...
              C1^(2*h1)*E2*d2(j)^h2*r1 + ...
              C2^(2*h2)*E1*d1(i)^h1*r2 + ...
              E1*r2*(C2*d2(j))^h2*(alpha2*d1(i))^h1 + ...
              E2*r1*(C1*d1(i))^h1*(alpha1*d2(j))^h2 + ...
              C2^h2*E1*r1*(C1*d1(i))^h1 + ...
              C1^h1*E2*r2*(C2*d2(j))^h2)/  ...
             (r1*(alpha1*d2(j))^h2*(alpha2*d1(i)^2)^h1 + ...
              r2*(alpha2*d1(i))^h1*(alpha1*d2(j)^2)^h2 + ...
              C2^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              C1^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C2^h2*r1*(alpha2*d1(i)^2)^h1 + ...
              C1^h1*r2*(alpha1*d2(j)^2)^h2 + ...
              d2(j)^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              d1(i)^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C1^(2*h1)*C2^h2*r1 + ...
              C1^h1*C2^(2*h2)*r2 + ...
              C1^(2*h1)*d2(j)^h2*r1 + ...
              C2^(2*h2)*d1(i)^h1*r2 + ...
              r1*(C1*d1(i))^h1*(alpha1*d2(j))^h2 + ...
              r2*(C2*d2(j))^h2*(alpha2*d1(i))^h1 + ...
              C2^h2*r1*(C1*d1(i))^h1 + ...
              C1^h1*r2*(C2*d2(j))^h2);
    end
end
%Downloaded from http://www.kennethmoreland.com/color-maps/
map = diverging_map(0:.001:1,[.23,.299,.745],[.706,.016,.15]);
[X,Y] = meshgrid(d1,d2);
C = contour(X,Y,Ed,20);
clf
hold on
surf(X,Y,Ed,'lines','None')
colormap(map)
set(gca,'xscale','log','yscale','log','linewidth',2.,'xticklabels',[],'yticklabels',[],'zticklabels',[],'xtick',logspace(-5,-1,5),'ytick',logspace(-5,-1,5))
grid off
axis([min(d1),max(d1),min(d2),max(d2),min(Ed(:))-.005,max(Ed(:))])
view([67,46])
xlabel('log([Drug 1])')
ylabel('log([Drug 2])')
zlabel('DIP')
hold on
scatter3(d1,min(d2)*ones(1000,1),Ed(1,:),30,[.7,.7,.7],'filled')
scatter3(min(d1)*ones(1000,1),d2,Ed(:,1),30,'k','filled')
scatter3(min(d1),min(d2),max(Ed(:)),150,'r','filled')
scatter3(max(d1),min(d2),Ed(1,end),150,'r','filled')
scatter3(min(d1),max(d2),Ed(end,1),150,'r','filled')
scatter3(max(d1),max(d2),min(Ed(:)),150,'r','filled')
[~,m_idx] = min((d2-C2).^2);
scatter3(C2,min(d2),Ed(1,m_idx),150,'r','filled')
[~,m_idx] = min((d1-C1).^2);
scatter3(min(d2),C1,Ed(m_idx,1),150,'r','filled')

s = contourdata(C); 
for i = 1:length(s)
    cont = [];
    for j = 1:length(s(i).xdata)
            cont(j) = (E3*r1*(alpha1*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  E3*r2*(alpha2*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  C2^h2*E0*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  C1^h1*E0*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*E1*r1*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  C1^h1*E2*r2*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  E3*s(i).ydata(j)^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  E3*s(i).xdata(j)^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C1^(2*h1)*C2^h2*E0*r1 + ...
                  C1^h1*C2^(2*h2)*E0*r2 + ...
                  C1^(2*h1)*E2*s(i).ydata(j)^h2*r1 + ...
                  C2^(2*h2)*E1*s(i).xdata(j)^h1*r2 + ...
                  E1*r2*(C2*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j))^h1 + ...
                  E2*r1*(C1*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*E1*r1*(C1*s(i).xdata(j))^h1 + ...
                  C1^h1*E2*r2*(C2*s(i).ydata(j))^h2)/  ...
                 (r1*(alpha1*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  r2*(alpha2*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  C2^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  C1^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*r1*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  C1^h1*r2*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  s(i).ydata(j)^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  s(i).xdata(j)^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C1^(2*h1)*C2^h2*r1 + ...
                  C1^h1*C2^(2*h2)*r2 + ...
                  C1^(2*h1)*s(i).ydata(j)^h2*r1 + ...
                  C2^(2*h2)*s(i).xdata(j)^h1*r2 + ...
                  r1*(C1*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j))^h2 + ...
                  r2*(C2*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j))^h1 + ...
                  C2^h2*r1*(C1*s(i).xdata(j))^h1 + ...
                  C1^h1*r2*(C2*s(i).ydata(j))^h2);
    end
    %plot3(s(i).xdata,s(i).ydata,cont,'color',map(i,:),'linewidth',1)
    plot3(s(i).ydata,s(i).xdata,cont,'k','linewidth',1)
end
set(gca,'ZGrid','on')
scatter3(ones(1000,1)*min(d1),d2,zeros(1000,1),10,'k')
scatter3(d1,max(d2)*ones(1000,1),zeros(1000,1),10,'k')
scatter3(ones(1000,1)*max(d1),d2,zeros(1000,1),10,'k')
scatter3(d1,min(d2)*ones(1000,1),zeros(1000,1),10,'k')
xlabel([])
ylabel([])
zlabel([])
saveas(h,'Asym_alpha_surfaceB-12-14.png')



d1 = logspace(-5,0,1000);
d2 = logspace(-5,0,1000);
h1 = 1;
h2 = 1;
C1 = .005;
C2 = .001;
E0 = .05;
E1 = .01;
E2 = .01;
beta = [-1];
alpha1 = [10];
alpha2 = [.1];
r1 = E0*100;
r2 = E0*100;



h = figure('color','w');
figure(h)
clf
p = 1;
k = 1;
E3 = -beta(p)*min(E1,E2)+min(E1,E2);

for i = 1:length(d1)
    for j = 1:length(d2)
        Ed(i,j) = (E3*r1*(alpha1*d2(j))^h2*(alpha2*d1(i)^2)^h1 + ...
              E3*r2*(alpha2*d1(i))^h1*(alpha1*d2(j)^2)^h2 + ...
              C2^h2*E0*r1*(C1*alpha2*d1(i))^h1 + ...
              C1^h1*E0*r2*(C2*alpha1*d2(j))^h2 + ...
              C2^h2*E1*r1*(alpha2*d1(i)^2)^h1 + ...
              C1^h1*E2*r2*(alpha1*d2(j)^2)^h2 + ...
              E3*d2(j)^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              E3*d1(i)^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C1^(2*h1)*C2^h2*E0*r1 + ...
              C1^h1*C2^(2*h2)*E0*r2 + ...
              C1^(2*h1)*E2*d2(j)^h2*r1 + ...
              C2^(2*h2)*E1*d1(i)^h1*r2 + ...
              E1*r2*(C2*d2(j))^h2*(alpha2*d1(i))^h1 + ...
              E2*r1*(C1*d1(i))^h1*(alpha1*d2(j))^h2 + ...
              C2^h2*E1*r1*(C1*d1(i))^h1 + ...
              C1^h1*E2*r2*(C2*d2(j))^h2)/  ...
             (r1*(alpha1*d2(j))^h2*(alpha2*d1(i)^2)^h1 + ...
              r2*(alpha2*d1(i))^h1*(alpha1*d2(j)^2)^h2 + ...
              C2^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              C1^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C2^h2*r1*(alpha2*d1(i)^2)^h1 + ...
              C1^h1*r2*(alpha1*d2(j)^2)^h2 + ...
              d2(j)^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              d1(i)^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C1^(2*h1)*C2^h2*r1 + ...
              C1^h1*C2^(2*h2)*r2 + ...
              C1^(2*h1)*d2(j)^h2*r1 + ...
              C2^(2*h2)*d1(i)^h1*r2 + ...
              r1*(C1*d1(i))^h1*(alpha1*d2(j))^h2 + ...
              r2*(C2*d2(j))^h2*(alpha2*d1(i))^h1 + ...
              C2^h2*r1*(C1*d1(i))^h1 + ...
              C1^h1*r2*(C2*d2(j))^h2);
    end
end
%Downloaded from http://www.kennethmoreland.com/color-maps/
map = diverging_map(0:.001:1,[.23,.299,.745],[.706,.016,.15]);
[X,Y] = meshgrid(d1,d2);
C = contour(X,Y,Ed,20);
clf
hold on
surf(X,Y,Ed,'lines','None')
colormap(map)
set(gca,'xscale','log','yscale','log','linewidth',2.,'xticklabels',[],'yticklabels',[],'zticklabels',[],'xtick',logspace(-5,-1,5),'ytick',logspace(-5,-1,5))
grid off
axis([min(d1),max(d1),min(d2),max(d2),min(Ed(:))-.005,max(Ed(:))])
view([67,46])
xlabel('log([Drug 1])')
ylabel('log([Drug 2])')
zlabel('DIP')
hold on
scatter3(d1,min(d2)*ones(1000,1),Ed(1,:),30,[.7,.7,.7],'filled')
scatter3(min(d1)*ones(1000,1),d2,Ed(:,1),30,'k','filled')
scatter3(min(d1),min(d2),max(Ed(:)),150,'r','filled')
scatter3(max(d1),min(d2),Ed(1,end),150,'r','filled')
scatter3(min(d1),max(d2),Ed(end,1),150,'r','filled')
scatter3(max(d1),max(d2),Ed(end,end),150,'r','filled')
[~,m_idx] = min((d2-C2).^2);
scatter3(C2,min(d2),Ed(1,m_idx),150,'r','filled')
[~,m_idx] = min((d1-C1).^2);
scatter3(min(d2),C1,Ed(m_idx,1),150,'r','filled')

s = contourdata(C); 
for i = 1:length(s)
    cont = [];
    for j = 1:length(s(i).xdata)
            cont(j) = (E3*r1*(alpha1*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  E3*r2*(alpha2*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  C2^h2*E0*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  C1^h1*E0*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*E1*r1*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  C1^h1*E2*r2*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  E3*s(i).ydata(j)^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  E3*s(i).xdata(j)^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C1^(2*h1)*C2^h2*E0*r1 + ...
                  C1^h1*C2^(2*h2)*E0*r2 + ...
                  C1^(2*h1)*E2*s(i).ydata(j)^h2*r1 + ...
                  C2^(2*h2)*E1*s(i).xdata(j)^h1*r2 + ...
                  E1*r2*(C2*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j))^h1 + ...
                  E2*r1*(C1*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*E1*r1*(C1*s(i).xdata(j))^h1 + ...
                  C1^h1*E2*r2*(C2*s(i).ydata(j))^h2)/  ...
                 (r1*(alpha1*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  r2*(alpha2*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  C2^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  C1^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*r1*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  C1^h1*r2*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  s(i).ydata(j)^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  s(i).xdata(j)^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C1^(2*h1)*C2^h2*r1 + ...
                  C1^h1*C2^(2*h2)*r2 + ...
                  C1^(2*h1)*s(i).ydata(j)^h2*r1 + ...
                  C2^(2*h2)*s(i).xdata(j)^h1*r2 + ...
                  r1*(C1*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j))^h2 + ...
                  r2*(C2*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j))^h1 + ...
                  C2^h2*r1*(C1*s(i).xdata(j))^h1 + ...
                  C1^h1*r2*(C2*s(i).ydata(j))^h2);
    end
    %plot3(s(i).xdata,s(i).ydata,cont,'color',map(i,:),'linewidth',1)
    plot3(s(i).ydata,s(i).xdata,cont,'k','linewidth',1)
end
set(gca,'ZGrid','on')
scatter3(ones(1000,1)*min(d1),d2,zeros(1000,1),10,'k')
scatter3(d1,max(d2)*ones(1000,1),zeros(1000,1),10,'k')
scatter3(ones(1000,1)*max(d1),d2,zeros(1000,1),10,'k')
scatter3(d1,min(d2)*ones(1000,1),zeros(1000,1),10,'k')
xlabel([])
ylabel([])
zlabel([])
saveas(h,'Asym_alpha_surfaceC-12-14.png')










d1 = logspace(-5,0,1000);
d2 = logspace(-5,0,1000);
h1 = 1;
h2 = 1;
C1 = .005;
C2 = .001;
E0 = .05;
E1 = .01;
E2 = .01;
beta = [0];
alpha1 = [10];
alpha2 = [.1];
r1 = E0*100;
r2 = E0*100;



h = figure('color','w');
figure(h)
clf
p = 1;
k = 1;
E3 = -beta(p)*min(E1,E2)+min(E1,E2);

for i = 1:length(d1)
    for j = 1:length(d2)
        Ed(i,j) = (E3*r1*(alpha1*d2(j))^h2*(alpha2*d1(i)^2)^h1 + ...
              E3*r2*(alpha2*d1(i))^h1*(alpha1*d2(j)^2)^h2 + ...
              C2^h2*E0*r1*(C1*alpha2*d1(i))^h1 + ...
              C1^h1*E0*r2*(C2*alpha1*d2(j))^h2 + ...
              C2^h2*E1*r1*(alpha2*d1(i)^2)^h1 + ...
              C1^h1*E2*r2*(alpha1*d2(j)^2)^h2 + ...
              E3*d2(j)^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              E3*d1(i)^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C1^(2*h1)*C2^h2*E0*r1 + ...
              C1^h1*C2^(2*h2)*E0*r2 + ...
              C1^(2*h1)*E2*d2(j)^h2*r1 + ...
              C2^(2*h2)*E1*d1(i)^h1*r2 + ...
              E1*r2*(C2*d2(j))^h2*(alpha2*d1(i))^h1 + ...
              E2*r1*(C1*d1(i))^h1*(alpha1*d2(j))^h2 + ...
              C2^h2*E1*r1*(C1*d1(i))^h1 + ...
              C1^h1*E2*r2*(C2*d2(j))^h2)/  ...
             (r1*(alpha1*d2(j))^h2*(alpha2*d1(i)^2)^h1 + ...
              r2*(alpha2*d1(i))^h1*(alpha1*d2(j)^2)^h2 + ...
              C2^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              C1^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C2^h2*r1*(alpha2*d1(i)^2)^h1 + ...
              C1^h1*r2*(alpha1*d2(j)^2)^h2 + ...
              d2(j)^h2*r1*(C1*alpha2*d1(i))^h1 + ...
              d1(i)^h1*r2*(C2*alpha1*d2(j))^h2 + ...
              C1^(2*h1)*C2^h2*r1 + ...
              C1^h1*C2^(2*h2)*r2 + ...
              C1^(2*h1)*d2(j)^h2*r1 + ...
              C2^(2*h2)*d1(i)^h1*r2 + ...
              r1*(C1*d1(i))^h1*(alpha1*d2(j))^h2 + ...
              r2*(C2*d2(j))^h2*(alpha2*d1(i))^h1 + ...
              C2^h2*r1*(C1*d1(i))^h1 + ...
              C1^h1*r2*(C2*d2(j))^h2);
    end
end
%Downloaded from http://www.kennethmoreland.com/color-maps/
map = diverging_map(0:.001:1,[.23,.299,.745],[.706,.016,.15]);
[X,Y] = meshgrid(d1,d2);
C = contour(X,Y,Ed,20);
clf
hold on
surf(X,Y,Ed,'lines','None')
colormap(map)
set(gca,'xscale','log','yscale','log','linewidth',2.,'xticklabels',[],'yticklabels',[],'zticklabels',[],'xtick',logspace(-5,-1,5),'ytick',logspace(-5,-1,5))
grid off
axis([min(d1),max(d1),min(d2),max(d2),min(Ed(:))-.005,max(Ed(:))])
view([67,46])
xlabel('log([Drug 1])')
ylabel('log([Drug 2])')
zlabel('DIP')
hold on
scatter3(d1,min(d2)*ones(1000,1),Ed(1,:),30,[.7,.7,.7],'filled')
scatter3(min(d1)*ones(1000,1),d2,Ed(:,1),30,'k','filled')
scatter3(min(d1),min(d2),max(Ed(:)),150,'r','filled')
scatter3(max(d1),min(d2),Ed(1,end),150,'r','filled')
scatter3(min(d1),max(d2),Ed(end,1),150,'r','filled')
scatter3(max(d1),max(d2),Ed(end,end),150,'r','filled')
[~,m_idx] = min((d2-C2).^2);
scatter3(C2,min(d2),Ed(1,m_idx),150,'r','filled')
[~,m_idx] = min((d1-C1).^2);
scatter3(min(d2),C1,Ed(m_idx,1),150,'r','filled')

s = contourdata(C); 
for i = 1:length(s)
    cont = [];
    for j = 1:length(s(i).xdata)
            cont(j) = (E3*r1*(alpha1*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  E3*r2*(alpha2*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  C2^h2*E0*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  C1^h1*E0*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*E1*r1*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  C1^h1*E2*r2*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  E3*s(i).ydata(j)^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  E3*s(i).xdata(j)^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C1^(2*h1)*C2^h2*E0*r1 + ...
                  C1^h1*C2^(2*h2)*E0*r2 + ...
                  C1^(2*h1)*E2*s(i).ydata(j)^h2*r1 + ...
                  C2^(2*h2)*E1*s(i).xdata(j)^h1*r2 + ...
                  E1*r2*(C2*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j))^h1 + ...
                  E2*r1*(C1*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*E1*r1*(C1*s(i).xdata(j))^h1 + ...
                  C1^h1*E2*r2*(C2*s(i).ydata(j))^h2)/  ...
                 (r1*(alpha1*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  r2*(alpha2*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  C2^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  C1^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C2^h2*r1*(alpha2*s(i).xdata(j)^2)^h1 + ...
                  C1^h1*r2*(alpha1*s(i).ydata(j)^2)^h2 + ...
                  s(i).ydata(j)^h2*r1*(C1*alpha2*s(i).xdata(j))^h1 + ...
                  s(i).xdata(j)^h1*r2*(C2*alpha1*s(i).ydata(j))^h2 + ...
                  C1^(2*h1)*C2^h2*r1 + ...
                  C1^h1*C2^(2*h2)*r2 + ...
                  C1^(2*h1)*s(i).ydata(j)^h2*r1 + ...
                  C2^(2*h2)*s(i).xdata(j)^h1*r2 + ...
                  r1*(C1*s(i).xdata(j))^h1*(alpha1*s(i).ydata(j))^h2 + ...
                  r2*(C2*s(i).ydata(j))^h2*(alpha2*s(i).xdata(j))^h1 + ...
                  C2^h2*r1*(C1*s(i).xdata(j))^h1 + ...
                  C1^h1*r2*(C2*s(i).ydata(j))^h2);
    end
    %plot3(s(i).xdata,s(i).ydata,cont,'color',map(i,:),'linewidth',1)
    plot3(s(i).ydata,s(i).xdata,cont,'k','linewidth',1)
end
set(gca,'ZGrid','on')
scatter3(ones(1000,1)*min(d1),d2,zeros(1000,1),10,'k')
scatter3(d1,max(d2)*ones(1000,1),zeros(1000,1),10,'k')
scatter3(ones(1000,1)*max(d1),d2,zeros(1000,1),10,'k')
scatter3(d1,min(d2)*ones(1000,1),zeros(1000,1),10,'k')
xlabel([])
ylabel([])
zlabel([])
saveas(h,'Asym_alpha_surfaceA-12-14.png')

